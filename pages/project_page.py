import os

from playwright.sync_api import Page

from locators.map_locators import MapLocators
from locators.project_locators import QubePageLocators
from pages.map_page import MapPage


class ProjectPage(MapPage):
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –ø—Ä–æ–µ–∫—Ç–∞ (–∞–≥–µ–Ω—Å—Ç–∫–∏–π —Ä–æ—É—Ç)
    """

    def __init__(self, page: Page, base_url: str = None):
        super().__init__(page, base_url)
        self.map_locators = MapLocators()
        self.project_locators = QubePageLocators()

    def open_agent_page(self):
        """–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–∞ (–∞–≥–µ–Ω—Ç —Ä–æ—É—Ç)."""
        self.open()

    def open_client_page(self):
        """–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–∞ (–∫–ª–∏–µ–Ω—Ç —Ä–æ—É—Ç)."""
        self.open()

    def fill_in_the_callback_form_on_project_client_page(self):
        """–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è —Ñ–æ—Ä–º—ã Callback."""
        self.expect_visible(self.project_locators.ClientPage.CALLBACK_FORM_BUTTON)
        self.click(self.project_locators.ClientPage.CALLBACK_FORM_BUTTON)

    def click_on_project(self, project_name: str):
        """–ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç –∏ –∑–∞—Ç–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É Explore Project."""
        self.wait_for_map_and_projects_loaded()
        # –°–Ω–∞—á–∞–ª–∞ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –ø—Ä–æ–µ–∫—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ MapPage)
        self.click_project(project_name)
        self.expect_visible(self.map_locators.PROJECT_INFO_WINDOW)
        self.expect_visible(self.map_locators.EXPLORE_PROJECT_BUTTON)
        # –ó–∞—Ç–µ–º –∫–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É Explore Project
        self.click(self.map_locators.EXPLORE_PROJECT_BUTTON)
        self.wait_for_page_load()

    def click_on_all_units_button(self):
        """–ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É All units."""
        self.expect_visible(self.project_locators.ALL_UNITS_BUTTON)
        self.click(self.project_locators.ALL_UNITS_BUTTON)

    def click_on_residences_button_and_request_viewing_form(self):
        """–ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É Residences."""
        self.expect_visible(self.project_locators.Elire.RESIDENCES_BUTTON)
        self.click(self.project_locators.Elire.RESIDENCES_BUTTON)
        self.click(self.project_locators.Elire.REQUEST_VIEWING_BUTTON)

    def find_and_click_available_apartment(self):
        """
        –ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç (–±–µ–∑ –∑–∞–º–∫–∞).
        
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
        """
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.page.wait_for_timeout(2000)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
        apartment_titles = self.page.locator(self.project_locators.ALL_APARTMENT_TITLES)
        apartment_count = apartment_titles.count()
        
        if apartment_count == 0:
            raise Exception("–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {apartment_count} –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤")
        
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç (–±–µ–∑ –∑–∞–º–∫–∞)
        for i in range(apartment_count):
            apartment_title = apartment_titles.nth(i)
            apartment_text = apartment_title.text_content()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–º–æ–∫ —É —ç—Ç–æ–≥–æ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
            # –ò—â–µ–º –∑–∞–º–æ–∫ –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
            lock_icon = apartment_title.locator("xpath=.//span[@role='img' and @aria-label='lock']")
            has_lock = lock_icon.count() > 0
            
            print(f"–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç {apartment_text}: {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if has_lock else '–¥–æ—Å—Ç—É–ø–µ–Ω'}")
            
            # –ï—Å–ª–∏ –∑–∞–º–∫–∞ –Ω–µ—Ç, –∫–ª–∏–∫–∞–µ–º –ø–æ —ç—Ç–æ–º—É –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É
            if not has_lock:
                print(f"–í—ã–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {apartment_text}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –∫–ª–∏–∫ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                apartment_title.evaluate("element => element.click()")
                return apartment_text
        
        # –ï—Å–ª–∏ –≤—Å–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        raise Exception("–í—Å–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã (–∏–º–µ—é—Ç –∑–∞–º–æ–∫)")

    def click_on_avialable_apart_on_cubix(self):
        self.expect_visible(self.project_locators.Cubix.AVIALABLE_APART_CARD)
        self.click(self.project_locators.Cubix.AVIALABLE_APART_CARD)

    def click_on_sales_offer_button(self):
        """–ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É Sales Offer."""
        self.expect_visible(self.project_locators.AgentPage.SALES_OFFER_BUTTON)
        self.click(self.project_locators.AgentPage.SALES_OFFER_BUTTON)

    def download_pdf_and_verify(self) -> tuple[bool, str]:
        """
        –°–∫–∞—á–∞—Ç—å PDF –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π.

        Returns:
            tuple: (—É—Å–ø–µ—Ö, –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
            download_dir = "temp/downloads"
            os.makedirs(download_dir, exist_ok=True)

            # –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            with self.page.expect_download() as download_info:
                # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ Download PDF
                self.expect_visible(self.project_locators.AgentPage.DOWNLOAD_PDF_BUTTON)
                self.click(self.project_locators.AgentPage.DOWNLOAD_PDF_BUTTON)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download = download_info.value

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è
            if not download or not download.suggested_filename:
                return False, ""

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ PDF
            if not download.suggested_filename.lower().endswith(".pdf"):
                return False, ""

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –Ω–∞—à—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            file_path = os.path.join(download_dir, download.suggested_filename)
            download.save_as(file_path)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–±–æ–ª—å—à–µ 1KB)
            file_size = os.path.getsize(file_path)

            print(f"PDF —Å–∫–∞—á–∞–Ω: {file_path}, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
            return file_size > 1024, file_path

        except Exception as e:
            return False, ""

    def cleanup_pdf_after_test(self):
        """–û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É."""
        os.system("rm -rf temp")

    def mock_request_viewing_api(self, project_name: str = None, configuration: str = None):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–∫ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã Request Viewing.
        
        Args:
            project_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (elire, arisha, cubix)
            configuration: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (1br-residence, 2br-residence, etc.)
        """
        def handle_route(route):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –º–æ–∫-–∑–∞–ø—Ä–æ—Å–∞
            import time
            mock_id = f"mock_{int(time.time())}"
            
            route.fulfill(
                status=200,
                content_type="text/x-component",
                body=f'0:["$@1",["{mock_id}",null]]\n1:{{"success":true,"error":null,"status":201}}'
            )
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –º–æ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
        if project_name and configuration:
            route_pattern = f"**/client/project/{project_name}/configuration/{configuration}"
        else:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            route_pattern = "**/client/project/*/configuration/*"
        
        self.page.route(route_pattern, handle_route)
        print(f"üîí API –º–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è: {route_pattern}")

    def send_request_viewing_form(self, fake):
        """
        –ó–∞–ø–æ–ª–Ω—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É Request Viewing —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Faker.
        
        Args:
            fake: –≠–∫–∑–µ–º–ø–ª—è—Ä Faker –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Faker
        form_data = {
            "first_name": fake.first_name(),
            "last_name": fake.last_name(),
            "phone": fake.phone_number(),
            "email": fake.email(),
            "note": fake.text(max_nb_chars=100)
        }
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        if "first_name" in form_data:
            self.fill("(//input[@id='first_name'])[1]", form_data["first_name"])
        if "last_name" in form_data:
            self.fill("(//input[@id='last_name'])[1]", form_data["last_name"])
        if "phone" in form_data:
            self.fill("(//input[@id='phone'])[1]", form_data["phone"])
        if "email" in form_data:
            self.fill("(//input[@id='email'])[1]", form_data["email"])
        if "note" in form_data:
            self.fill("(//textarea[@id='note'])[1]", form_data["note"])
        
        # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.click(self.project_locators.Elire.SUBMIT_BUTTON_FOR_REQUEST_VIEWING)


    def is_success_message_displayed(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ.
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        """
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
            success_selectors = [
                'text="Thank you!"',
                'text="Our specialist will contact you shortly."',
                'text="Thank you! Our specialist will contact you shortly."',
                'text="Request submitted successfully"',
                'text="Thank you for your request"',
                'text="Your request has been sent"',
                '[class*="success"]',
                '[class*="message"]'
            ]
            
            for selector in success_selectors:
                if self.page.locator(selector).count() > 0:
                    return True
            
            return False
        except Exception as e:
            return False
