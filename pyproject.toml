[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "autotests"
version = "1.0.0"
description = "Автоматизированные тесты для проектов Qube, Capstone и Wellcube"
authors = [{name = "QA Team", email = "qa@company.com"}]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
keywords = ["testing", "automation", "playwright", "pytest", "web"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Testing",
]

dependencies = [
    "pytest>=8.4.1",
    "pytest-playwright>=0.7.0",
    "playwright>=1.54.0",
    "allure-pytest>=2.15.0",
    "allure-python-commons>=2.15.0",
    "requests>=2.32.4",
    "Faker>=25.2.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=25.1.0",
    "isort>=6.0.1",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/company/autotests"
Documentation = "https://github.com/company/autotests#readme"
Repository = "https://github.com/company/autotests.git"
Issues = "https://github.com/company/autotests/issues"

[project.scripts]
autotests = "autotests.cli:main"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | reports
  | logs
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["core", "config", "pages", "locators", "utils"]
known_third_party = ["pytest", "playwright", "allure", "requests", "faker", "dotenv"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "allure.*",
    "playwright.*",
    "faker.*",
    "dotenv.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--alluredir=reports/allure-results",
    "--tb=long",
    "--maxfail=0",
    "--continue-on-collection-errors",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "smoke: smoke tests",
    "regression: regression tests",
    "ui: ui tests",
    "api: api tests",
    "mobile: mobile tests",
    "mobile_device: mobile device specific tests",
    "responsive: responsive design tests",
    "slow: slow tests",
    "integration: integration tests",
]

[tool.coverage.run]
source = ["core", "config", "pages", "locators", "utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
