import os
from datetime import datetime

import allure
import pytest
from playwright.sync_api import Page

from pages.map_page import MapPage
from pages.project_page import ProjectPage


def _create_environment_properties():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª environment.properties –¥–ª—è Allure –æ—Ç—á–µ—Ç–∞"""
    env = os.getenv("TEST_ENVIRONMENT", "prod")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("reports/allure-results", exist_ok=True)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL-—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    urls = _get_urls_by_environment()

    # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ environment.properties
    properties_content = f"""# Test Environment Configuration
                            environment = {env}
                            url = {urls['map']}
                        """

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    with open(
        "reports/allure-results/environment.properties", "w", encoding="utf-8"
    ) as f:
        f.write(properties_content)

    print(f"üìù Environment properties —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {env.upper()}")


@pytest.fixture(scope="session", autouse=True)
def setup_environment():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤"""
    _create_environment_properties()
    return _get_urls_by_environment()


@pytest.fixture(autouse=True)
def setup_test_parameters(page: Page, request):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OS –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OS –¥–ª—è Allure
    os_name = os.getenv("OS_NAME", "Unknown")
    os_platform = os.getenv("OS_PLATFORM", "Unknown")
    
    allure.dynamic.parameter("Operating System", os_name)
    allure.dynamic.parameter("Platform", os_platform)
    
    yield
    
    if request.node.rep_call.failed:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("reports/screenshots", exist_ok=True)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        test_name = request.node.name.replace("/", "_").replace("\\", "_")
        screenshot_name = f"{test_name}_{timestamp}.png"
        screenshot_path = os.path.join("reports/screenshots", screenshot_name)

        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot = page.screenshot()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(screenshot_path, "wb") as f:
            f.write(screenshot)

        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫ Allure –æ—Ç—á–µ—Ç—É
        allure.attach(
            screenshot, name="screenshot", attachment_type=allure.attachment_type.PNG
        )


@pytest.fixture(scope="session")
def browser_context_args(browser_context_args):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞."""
    return {
        **browser_context_args,
        "viewport": {"width": 1920, "height": 1080},
        "ignore_https_errors": True,
    }


@pytest.fixture(scope="session")
def browser_type_launch_args(browser_type):
    """–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –±—Ä–∞—É–∑–µ—Ä–∞."""
    headless = os.getenv("HEADLESS", "true").lower() == "true"

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è Chromium
    if browser_type.name == "chromium":
        args = [
            "--window-size=1920,1080",
            "--no-sandbox",
            "--disable-dev-shm-usage",
            "--disable-gpu",
            "--start-maximized",
        ]
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è Firefox
    elif browser_type.name == "firefox":
        args = ["--width=1920", "--height=1080"]
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è WebKit - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
    elif browser_type.name == "webkit":
        args = []
    else:
        args = []

    return {"headless": headless, "args": args}


@pytest.fixture(scope="session")
def base_url():
    """Base URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return _get_urls_by_environment()["map"]


@pytest.fixture(scope="session")
def agent_url():
    """Base agent URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return _get_urls_by_environment()["agent"]


@pytest.fixture(scope="session")
def client_url():
    """Base client URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return _get_urls_by_environment()["client"]


@pytest.fixture(scope="session")
def capstone_map_url():
    """URL –∫–∞—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ Capstone –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return _get_urls_by_environment()["capstone_map"]


@pytest.fixture(scope="session")
def wellcube_map_url():
    """URL –∫–∞—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ Wellcube (Tranquil) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return _get_urls_by_environment()["wellcube_map"]


@pytest.fixture
def fake():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Faker."""
    from faker import Faker

    return Faker(["ru_RU", "en_US"])


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ä—Ç—ã Qube (–æ–±—â–∞—è)
@pytest.fixture
def qube_map_page(page: Page, base_url):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç—ã Qube (—Å–æ–¥–µ—Ä–∂–∏—Ç arisha, elire, cubix)"""
    return MapPage(page, base_url)


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Arisha
@pytest.fixture
def arisha_map_page(page: Page, base_url):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ Arisha"""
    return MapPage(page, base_url)


@pytest.fixture
def arisha_agent_page(page: Page, agent_url):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∞–≥–µ–Ω—Ç—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞ Arisha"""
    return ProjectPage(page, agent_url)


@pytest.fixture
def arisha_client_page(page: Page, client_url):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞ Arisha"""
    return ProjectPage(page, client_url)


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Elire
@pytest.fixture
def elire_map_page(page: Page, base_url):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ Elire"""
    return MapPage(page, base_url)


@pytest.fixture
def elire_agent_page(page: Page, agent_url):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∞–≥–µ–Ω—Ç—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞ Elire"""
    return ProjectPage(page, agent_url)


@pytest.fixture
def elire_client_page(page: Page, client_url):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞ Elire"""
    return ProjectPage(page, client_url)


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Cubix
@pytest.fixture
def cubix_map_page(page: Page, base_url):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ Cubix"""
    return MapPage(page, base_url)


@pytest.fixture
def cubix_agent_page(page: Page, agent_url):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∞–≥–µ–Ω—Ç—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞ Cubix"""
    return ProjectPage(page, agent_url)


@pytest.fixture
def cubix_client_page(page: Page, client_url):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞ Cubix"""
    return ProjectPage(page, client_url)


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Capstone (Peylaa)
@pytest.fixture
def capstone_map_page(page: Page, capstone_map_url):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ Capstone"""
    return MapPage(page, capstone_map_url)


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Wellcube (Tranquil)
@pytest.fixture
def wellcube_map_page(page: Page, wellcube_map_url):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ Wellcube (Tranquil)"""
    return MapPage(page, wellcube_map_url)


# –•—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
def pytest_runtest_makereport(item, call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤."""
    if call.when == "call":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–∏–∫—Å—Ç—É—Ä–∞—Ö
        item.rep_call = call


def _get_urls_by_environment() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ URL-—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env = os.getenv("TEST_ENVIRONMENT", "prod")

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Allure (—Ç–æ–ª—å–∫–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ)
    allure.dynamic.label("environment", env)

    if env == "dev":
        return {
            # Qube –ø—Ä–æ–µ–∫—Ç—ã (Arisha, Elire, Cubix)
            "map": os.getenv("DEV_BASE_URL", "https://qube-dev-next.evometa.io/map"),
            "agent": os.getenv(
                "DEV_AGENT_BASE_URL", "https://qube-dev-next.evometa.io/agent/map"
            ),
            "client": os.getenv(
                "DEV_CLIENT_BASE_URL", "https://qube-dev-next.evometa.io/client/map"
            ),
            # Capstone –ø—Ä–æ–µ–∫—Ç (Peylaa)
            "capstone_map": os.getenv(
                "DEV_CAPSTONE_BASE_URL", "https://capstone-dev.evometa.io/map"
            ),
            # Wellcube –ø—Ä–æ–µ–∫—Ç (Tranquil)
            "wellcube_map": os.getenv(
                "DEV_WELLCUBE_BASE_URL", "https://catalog-dev.evometa.io/wellcube/map"
            ),
        }
    else:
        return {
            # Qube –ø—Ä–æ–µ–∫—Ç—ã (Arisha, Elire, Cubix) - PROD
            "map": os.getenv("PROD_BASE_URL", "https://virtualtours.qbd.ae/map"),
            "agent": os.getenv(
                "AGENT_PROD_BASE_URL", "https://virtualtours.qbd.ae/agent/map"
            ),
            "client": os.getenv(
                "CLIENT_PROD_BASE_URL", "https://virtualtours.qbd.ae/client/map"
            ),
            # Capstone –ø—Ä–æ–µ–∫—Ç (Peylaa) - PROD
            "capstone_map": os.getenv(
                "CAPSTONE_PROD_BASE_URL", "https://3dtours.peylaa-phuket.com/map"
            ),
            # Wellcube –ø—Ä–æ–µ–∫—Ç (Tranquil) - PROD
            "wellcube_map": os.getenv(
                "WELLCUBE_PROD_BASE_URL", "https://catalog.evometa.io/wellcube/map"
            ),
        }
