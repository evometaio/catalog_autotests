name: Tests CI Pipeline

on:
  schedule:
    # Запуск каждый день в 11:00 по МСК (08:00 UTC)
    - cron: '0 8 * * *'
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Окружение для тестирования'
        required: true
        default: 'prod'
        type: choice
        options: [prod, dev]
      run_type:
        description: 'Тип запуска тестов'
        required: false
        default: 'regression'
        type: choice
        options: [smoke, regression, full]

env:
  ALLURE_REPORT_DIR: "allure-report"
  ALLURE_RESULTS_DIR: "allure-results"
  PROD_BASE_URL: "https://virtualtours.qbd.ae/map"
  DEV_BASE_URL: "https://qube-dev-next.evometa.io/map"
  DEV_AGENT_BASE_URL: "https://qube-dev-next.evometa.io/agent/map"
  DEV_CLIENT_BASE_URL: "https://qube-dev-next.evometa.io/client/map"
  AGENT_PROD_BASE_URL: "https://virtualtours.qbd.ae/agent/map"
  CLIENT_PROD_BASE_URL: "https://virtualtours.qbd.ae/client/map"
  DEV_CAPSTONE_BASE_URL: "https://capstone-dev.evometa.io/map"
  CAPSTONE_PROD_BASE_URL: "https://3dtours.peylaa-phuket.com/map"
  DEV_WELLCUBE_BASE_URL: "https://catalog-dev.evometa.io/wellcube/map"
  WELLCUBE_PROD_BASE_URL: "https://catalog.evometa.io/wellcube/map"
  USERNAME_ELIRE: ${{ secrets.USERNAME_ELIRE }}
  PASSWORD_ELIRE: ${{ secrets.PASSWORD_ELIRE }}

jobs:
  ubuntu-firefox:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-playwright
          python -m playwright install firefox
          python -m playwright install-deps

      - name: Create environment properties
        run: |
          mkdir -p ${{ env.ALLURE_RESULTS_DIR }}
          
          ENV="${{ github.event.inputs.environment || 'prod' }}"
          if [ "$ENV" = "prod" ]; then
            URL="${{ env.PROD_BASE_URL }}"
          else
            URL="${{ env.DEV_BASE_URL }}"
          fi
          
          cat > ${{ env.ALLURE_RESULTS_DIR }}/environment.properties << EOF
          # Test Environment Configuration
          environment = $ENV
          url = $URL
          OS = ${{ runner.os }}
          EOF
        env:
          TEST_ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}

      - name: Run tests (Firefox/Linux)
        run: pytest tests/ui/qube/ tests/ui/wellcube/ tests/ui/capstone/ --browser=firefox --alluredir=${{ env.ALLURE_RESULTS_DIR }}
        env:
          TEST_ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}
          OS_NAME: ${{ runner.os }}
          OS_PLATFORM: "ubuntu-latest"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-ubuntu-firefox
          path: ${{ env.ALLURE_RESULTS_DIR }}

  windows-chromium:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        shell: pwsh
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-playwright
          python -m playwright install chromium
          python -m playwright install-deps

      - name: Create environment properties
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path ${{ env.ALLURE_RESULTS_DIR }}
          
          $env = "${{ github.event.inputs.environment || 'prod' }}"
          if ($env -eq "prod") {
            $url = "${{ env.PROD_BASE_URL }}"
          } else {
            $url = "${{ env.DEV_BASE_URL }}"
          }
          
          @"
          # Test Environment Configuration
          environment = $env
          url = $url
          OS = ${{ runner.os }}
          "@ | Out-File -FilePath "${{ env.ALLURE_RESULTS_DIR }}/environment.properties" -Encoding UTF8
        env:
          TEST_ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}

      - name: Run tests (Chromium/Windows)
        shell: pwsh
        run: pytest tests/ui/qube/ tests/ui/wellcube/ tests/ui/capstone/ --browser=chromium --alluredir=${{ env.ALLURE_RESULTS_DIR }}
        env:
          TEST_ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}
          OS_NAME: ${{ runner.os }}
          OS_PLATFORM: "windows-latest"

      - name: Run mobile tests (iPhone 13)
        run: pytest tests/ui/mobile/ --browser=chromium --alluredir=${{ env.ALLURE_RESULTS_DIR }}
        env:
          TEST_ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}
          MOBILE_DEVICE: iphone_13
          OS_NAME: ${{ runner.os }}

      - name: Run mobile tests (Pixel 5)
        run: pytest tests/ui/mobile/ --browser=chromium --alluredir=${{ env.ALLURE_RESULTS_DIR }}
        env:
          TEST_ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}
          MOBILE_DEVICE: pixel_5
          OS_NAME: ${{ runner.os }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-windows-chromium
          path: ${{ env.ALLURE_RESULTS_DIR }}

  macos-webkit:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-playwright
          python -m playwright install webkit
          python -m playwright install-deps
          brew install allure

      - name: Create environment properties
        run: |
          mkdir -p ${{ env.ALLURE_RESULTS_DIR }}
          
          ENV="${{ github.event.inputs.environment || 'prod' }}"
          if [ "$ENV" = "prod" ]; then
            URL="${{ env.PROD_BASE_URL }}"
          else
            URL="${{ env.DEV_BASE_URL }}"
          fi
          
          cat > ${{ env.ALLURE_RESULTS_DIR }}/environment.properties << EOF
          # Test Environment Configuration
          environment = $ENV
          url = $URL
          OS = ${{ runner.os }}
          EOF
        env:
          TEST_ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}

      - name: Run tests (Webkit/macOS)
        run: pytest tests/ui/qube/ tests/ui/wellcube/ tests/ui/capstone/ --browser=webkit --alluredir=${{ env.ALLURE_RESULTS_DIR }}
        env:
          TEST_ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}
          OS_NAME: ${{ runner.os }}
          OS_PLATFORM: "macos-latest"



      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-macos-webkit
          path: ${{ env.ALLURE_RESULTS_DIR }}

  deploy-allure:
    runs-on: ubuntu-latest
    needs: [ubuntu-firefox, windows-chromium, macos-webkit]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download results
        uses: actions/download-artifact@v4
        with:
          path: allure-results
          pattern: allure-results-*
          merge-multiple: true



      - name: Install Allure
        run: |
          curl -Ls https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz -o allure.tgz
          sudo tar -zxvf allure.tgz -C /opt/
          sudo ln -s /opt/allure-2.27.0/bin/allure /usr/bin/allure

      - name: Download previous history
        run: |
          mkdir -p old-history
          echo "🔍 Загружаем history.zip из GitHub Pages..."
          
          curl -s -L -f "https://${{ github.repository_owner }}.github.io/catalog_autotests/allure-report/history.zip" -o history.zip || {
            echo "ℹ️ History.zip не найден, будет создан новый"
            rm -f history.zip
          }

          if [ -f history.zip ] && [ -s history.zip ]; then
            echo "✅ History.zip найден, проверяем содержимое..."
            if file history.zip | grep -q "Zip archive"; then
              echo "📦 Распаковываем history.zip..."
              unzip -q history.zip -d old-history
              echo "✅ History успешно загружен"
            else
              echo "❌ Файл не является zip архивом, удаляем"
              rm -f history.zip
            fi
          else
            echo "ℹ️ History не найден, будет создан новый"
          fi

      - name: Generate Allure report with history
        run: |
          echo "🔧 Подготавливаем результаты для генерации отчета..."
          mkdir -p combined-results
          
          # Копируем все результаты тестов
          find allure-results -type f -exec cp {} combined-results/ \;
          echo "✅ Результаты тестов скопированы"

          # Добавляем history если есть
          if [ -d old-history/history ]; then
            echo "📚 Копируем history..."
            cp -r old-history/history combined-results/
            echo "✅ History добавлен"
          else
            echo "ℹ️ History не найден, создаем новый"
          fi

          # Генерируем отчет
          echo "📊 Генерируем Allure отчет..."
          allure generate combined-results --clean -o ${{ env.ALLURE_REPORT_DIR }}
          echo "✅ Отчет сгенерирован"

          # Проверяем, что создалось в allure-report
          echo "🔍 Проверяем содержимое allure-report..."
          ls -la ${{ env.ALLURE_REPORT_DIR }}
          
          # Создаем history.zip внутри allure-report для деплоя
          cd ${{ env.ALLURE_REPORT_DIR }}
          echo "📁 Текущая директория: $(pwd)"
          echo "📁 Содержимое: $(ls -la)"
          
          if [ -d history ]; then
            echo "📦 Создаем history.zip внутри allure-report..."
            zip -r history.zip history/
            echo "✅ History.zip создан внутри allure-report"
            echo "📁 После создания: $(ls -la)"
          else
            echo "⚠️ Папка history не найдена, history.zip не создан"
            echo "📁 Доступные папки: $(find . -type d -maxdepth 1)"
          fi
          cd ../..



      - name: Deploy Allure to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          destination_dir: allure-report

      - name: Upload Allure summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-summary
          path: allure-report/widgets/summary.json



  notify:
    runs-on: ubuntu-latest
    needs: [ubuntu-firefox, windows-chromium, macos-webkit, deploy-allure]
    if: always() && (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule')
    steps:
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      - name: Download results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          path: allure-results
          pattern: allure-results-*
          merge-multiple: true

      - name: Download Allure summary
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: allure-summary
          path: ./allure-summary

      - name: Compute test status counts
        shell: bash
        run: |
          echo "🔍 Reading Allure summary only..."
          if [ -f ./allure-summary/summary.json ]; then
            echo "Found summary.json"
            passed=$(jq -r '.statistic.passed' ./allure-summary/summary.json)
            failed=$(jq -r '.statistic.failed' ./allure-summary/summary.json)
            broken=$(jq -r '.statistic.broken' ./allure-summary/summary.json)
            echo "Counts from summary.json: passed=$passed, failed=$failed, broken=$broken"
          else
            echo "summary.json not found, setting counts to 0 (no fallback to raw)."
            passed=0; failed=0; broken=0
          fi
          echo "PASSED=$passed" >> "$GITHUB_ENV"
          echo "FAILED=$failed" >> "$GITHUB_ENV"
          echo "BROKEN=$broken" >> "$GITHUB_ENV"
      - name: Send Telegram summary
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ${{ (needs.ubuntu-firefox.result == 'success' && needs.windows-chromium.result == 'success' && needs.macos-webkit.result == 'success') && '✅' || '❌' }} <b>Итоговый отчет по тестам</b> 

            <b>Проект:</b> ${{ github.repository }}
            <b>Ветка:</b> ${{ github.ref_name }}
            <b>Окружение:</b> ${{ github.event.inputs.environment || 'prod' }}
            <b>Тип запуска:</b> ${{ github.event.inputs.run_type || (github.event_name == 'schedule' && 'scheduled') || 'regression' }}

            🟩 <b>passed:</b> ${{ env.PASSED }}
            🟥 <b>failed:</b> ${{ env.FAILED }}
            🟨 <b>broken:</b> ${{ env.BROKEN }}

            📊 <b>Отчет:</b> <a href="https://${{ github.repository_owner }}.github.io/catalog_autotests/allure-report/">Allure</a>
            🔗 <b>Actions:</b> <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">GH Actions</a>
          format: html
          disable_web_page_preview: true