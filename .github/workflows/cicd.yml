name: Tests CI Pipeline

on:
  push:
    branches: [main, develop, feature/*, bugfix/*, hotfix/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Окружение для тестирования'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - dev
      browsers:
        description: 'Браузеры для тестирования'
        required: false
        default: 'default'
        type: choice
        options:
        - default
        - all
      run_type:
        description: 'Тип запуска тестов'
        required: false
        default: 'regression'
        type: choice
        options:
        - smoke
        - regression
        - full

env:
  ALLURE_REPORT_DIR: "allure-report"
  ALLURE_RESULTS_DIR: "allure-results"
  PROD_BASE_URL: "https://virtualtours.qbd.ae/map"
  DEV_BASE_URL: "https://qube-dev-next.evometa.io/map"

jobs:
  test-ubuntu-firefox:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-playwright

      - name: Install Playwright browsers
        run: |
          python -m playwright install firefox
          python -m playwright install-deps

      - name: Install Allure
        run: |
          curl -o allure-2.27.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          sudo tar -zxvf allure-2.27.0.tgz -C /opt/
          sudo ln -s /opt/allure-2.27.0/bin/allure /usr/bin/allure

      - name: Run tests
        run: |
          pytest --browser=firefox --alluredir=${{ env.ALLURE_RESULTS_DIR }} --maxfail=0 --tb=short --continue-on-collection-errors
        env:
          BASE_URL: ${{ github.event.inputs.environment == 'prod' && env.PROD_BASE_URL || env.DEV_BASE_URL || env.PROD_BASE_URL }}

      - name: Generate Allure report
        run: |
          if command -v allure &> /dev/null; then
            allure generate ${{ env.ALLURE_RESULTS_DIR }} --clean -o ${{ env.ALLURE_REPORT_DIR }}
          else
            echo "Allure not found, skipping report generation"
            exit 0
          fi

      - name: Ensure summary.json exists
        run: |
          mkdir -p "${{ env.ALLURE_REPORT_DIR }}/widgets"
          if [ ! -f "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json" ]; then
            echo '{"statistic":{"total":0,"passed":0,"failed":0,"skipped":0,"broken":0,"canceled":0}}' > "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"
          fi

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-ubuntu-firefox
          path: ${{ env.ALLURE_RESULTS_DIR }}
          retention-days: 30

  test-windows-chrome:
    runs-on: windows-latest
    outputs:
      status: ${{ job.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-playwright

      - name: Install Playwright browsers
        shell: pwsh
        run: |
          python -m playwright install chromium
          python -m playwright install-deps

      - name: Install Java
        shell: pwsh
        run: choco install openjdk --version=17 -y

      - name: Install Allure
        shell: pwsh
        run: |
          $allureVersion = "2.27.0"
          $allureUrl = "https://github.com/allure-framework/allure2/releases/download/$allureVersion/allure-$allureVersion.tgz"
          $allureArchive = "$env:TEMP\allure-$allureVersion.tgz"

          Invoke-WebRequest -Uri $allureUrl -OutFile $allureArchive
          tar -xzf $allureArchive -C C:\
          $allureDir = "C:\allure-$allureVersion"
          Add-Content -Path $env:GITHUB_PATH -Value "$allureDir\bin"
          Remove-Item $allureArchive -Force

      - name: Run tests
        shell: pwsh
        run: |
          pytest --browser=chromium --alluredir=${{ env.ALLURE_RESULTS_DIR }} --maxfail=0 --tb=short --continue-on-collection-errors
        env:
          BASE_URL: ${{ github.event.inputs.environment == 'prod' && env.PROD_BASE_URL || env.DEV_BASE_URL || env.PROD_BASE_URL }}

      - name: Generate Allure report
        shell: pwsh
        run: |
          try {
            allure generate ${{ env.ALLURE_RESULTS_DIR }} --clean -o ${{ env.ALLURE_REPORT_DIR }}
          } catch {
            Write-Host "Allure not found, skipping report generation"
            exit 0
          }

      - name: Ensure summary.json exists
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "${{ env.ALLURE_REPORT_DIR }}/widgets"
          if (-not (Test-Path "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json")) {
            '{"statistic":{"total":0,"passed":0,"failed":0,"skipped":0,"broken":0,"canceled":0}}' | Out-File -FilePath "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json" -Encoding UTF8
          }

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-windows-chrome
          path: ${{ env.ALLURE_RESULTS_DIR }}
          retention-days: 30

  test-macos-safari:
    runs-on: macos-latest
    outputs:
      status: ${{ job.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-playwright

      - name: Install Playwright browsers
        run: |
          python -m playwright install webkit
          python -m playwright install-deps

      - name: Install Allure
        run: brew install allure

      - name: Run tests
        run: |
          pytest --browser=webkit --alluredir=${{ env.ALLURE_RESULTS_DIR }} --maxfail=0 --tb=short --continue-on-collection-errors
        env:
          BASE_URL: ${{ github.event.inputs.environment == 'prod' && env.PROD_BASE_URL || env.DEV_BASE_URL || env.PROD_BASE_URL }}

      - name: Generate Allure report
        run: |
          if command -v allure &> /dev/null; then
            allure generate ${{ env.ALLURE_RESULTS_DIR }} --clean -o ${{ env.ALLURE_REPORT_DIR }}
          else
            echo "Allure not found, skipping report generation"
            exit 0
          fi

      - name: Ensure summary.json exists
        run: |
          mkdir -p "${{ env.ALLURE_REPORT_DIR }}/widgets"
          if [ ! -f "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json" ]; then
            echo '{"statistic":{"total":0,"passed":0,"failed":0,"skipped":0,"broken":0,"canceled":0}}' > "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"
          fi

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-macos-safari
          path: ${{ env.ALLURE_RESULTS_DIR }}
          retention-days: 30

  deploy-allure:
    runs-on: ubuntu-latest
    needs: [test-ubuntu-firefox, test-windows-chrome, test-macos-safari]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Ubuntu results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-firefox
          path: allure-results/ubuntu-firefox
        continue-on-error: true

      - name: Download Windows results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-chrome
          path: allure-results/windows-chrome
        continue-on-error: true

      - name: Download macOS results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-macos-safari
          path: allure-results/macos-safari
        continue-on-error: true

      - name: Check downloaded artifacts
        run: |
          echo "Checking downloaded artifacts..."
          ls -la allure-results/ || echo "No allure-results directory"
          find allure-results -name "*.json" -o -name "*.xml" | head -10 || echo "No test result files found"

      - name: Setup Allure
        run: |
          curl -o allure-2.27.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          sudo tar -zxvf allure-2.27.0.tgz -C /opt/
          sudo ln -s /opt/allure-2.27.0/bin/allure /usr/bin/allure

      - name: Download previous results for history
        uses: actions/download-artifact@v4
        with:
          name: allure-results-archive
          path: allure-results-old
        continue-on-error: true

      - name: Check previous results
        run: |
          if [ -d "allure-results-old" ]; then
            echo "Previous results found for history"
            find allure-results-old -name "*.json" | wc -l | xargs echo "Previous JSON files:"
            find allure-results-old -name "*.xml" | wc -l | xargs echo "Previous XML files:"
          else
            echo "No previous results found, starting fresh"
          fi

      - name: Generate Allure report with history
        run: |
          # Проверяем, есть ли результаты тестов
          if [ ! -d "allure-results" ] || [ -z "$(find allure-results -name '*.json' -o -name '*.xml' 2>/dev/null)" ]; then
            echo "No test results found, creating empty report"
            mkdir -p allure-report
            echo '{"statistic":{"total":0,"passed":0,"failed":0,"skipped":0,"broken":0,"canceled":0}}' > allure-report/widgets/summary.json
            exit 0
          fi
          
          # Объединение результатов всех job'ов
          mkdir -p combined-results
          echo "Copying current test results..."
          find allure-results -name "*.json" -exec cp {} combined-results/ \;
          find allure-results -name "*.xml" -exec cp {} combined-results/ \;
          
          # Если есть предыдущий отчет, копируем его результаты для истории
          if [ -d "allure-results-old" ]; then
            echo "Merging with previous results for history..."
            find allure-results-old -name "*.json" -exec cp {} combined-results/ \;
            find allure-results-old -name "*.xml" -exec cp {} combined-results/ \;
          fi
          
          echo "Total files for report generation:"
          find combined-results -name "*.json" | wc -l | xargs echo "JSON files:"
          find combined-results -name "*.xml" | wc -l | xargs echo "XML files:"
          
          # Генерация отчета с историей
          allure generate combined-results --clean -o allure-report
          
          # Создаем архив результатов для следующего запуска
          cd allure-report
          zip -r ../allure-results.zip data/
          cd ..
          
          echo "Report generated and archived for next run"
          
          # Очистка временных файлов
          rm -rf allure-results-old combined-results

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          destination_dir: allure-report

      - name: Upload results archive for next run
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-archive
          path: allure-results.zip
          retention-days: 90

  send-summary:
    runs-on: ubuntu-latest
    needs: [test-ubuntu-firefox, test-windows-chrome, test-macos-safari, deploy-allure]
    if: always()
    steps:
      - name: Generate and send Telegram summary
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            <b>🚀 Итоговый отчет по тестам</b>
            
            <b>Проект:</b> ${{ github.repository }}
            <b>Ветка:</b> ${{ github.ref_name }}
            <b>Окружение:</b> ${{ github.event.inputs.environment || 'prod' }}
            <b>Тип запуска:</b> ${{ github.event.inputs.run_type || 'regression' }}
            
            <b>Статус тестов:</b> ${{ (needs.test-ubuntu-firefox.result == 'success' && needs.test-windows-chrome.result == 'success' && needs.test-macos-safari.result == 'success') && '✅ Все тесты прошли' || '❌ Есть ошибки в тестах' }}
            
            <b>Ссылка на Allure отчет:</b> <a href="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/allure-report/">📊 Отчет (с историей)</a>
            <b>Ссылка на Actions:</b> <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">GitHub Actions</a>
          format: html
          disable_web_page_preview: true
