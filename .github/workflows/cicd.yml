name: CI Pipe

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment"
        required: true
        default: "dev"
        type: choice
        options: [dev, prod]
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            browser: chromium
          - os: ubuntu-latest
            browser: firefox
          - os: ubuntu-latest
            browser: webkit
          - os: windows-latest
            browser: chromium
          - os: windows-latest
            browser: firefox
          - os: windows-latest
            browser: webkit
          - os: macos-latest
            browser: chromium
          - os: macos-latest
            browser: firefox
          - os: macos-latest
            browser: webkit

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-playwright

      - name: Setup Playwright
        run: |
          python -m playwright install --with-deps ${{ matrix.browser }}

      # ==== OS-specific Allure install ====
      - name: Install Allure (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-add-repository ppa:qameta/allure -y
          sudo apt-get update
          sudo apt-get install -y allure

      - name: Install Allure (macOS)
        if: runner.os == 'macOS'
        run: brew install allure

      - name: Install Java (Windows)
        if: runner.os == 'Windows'
        run: choco install openjdk --version=17.0.12 -y
        shell: pwsh

      - name: Install Allure (Windows)
        if: runner.os == 'Windows'
        run: choco install allure --version=2.13.9 -y
        shell: pwsh

      # ==== Run tests ====
      - name: Run Playwright tests
        run: |
          python -m pytest tests/test_sample.py \
            --alluredir=allure-results \
            --browser=${{ matrix.browser }}

      # ==== Process Allure results ====
      - name: Ensure allure-results directory
        run: mkdir -p allure-results

      - name: Ensure summary.json exists
        run: |
          if [ ! -f allure-results/summary.json ]; then
            echo '{}' > allure-results/summary.json
          fi

      - name: Generate Allure report
        run: |
          allure generate allure-results --clean -o allure-report || echo "Allure report generation failed"

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}-${{ matrix.browser }}
          path: allure-results

      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ matrix.os }}-${{ matrix.browser }}
          path: allure-report

      - name: Save status
        run: |
          echo "${{ matrix.os }} | ${{ matrix.browser }} | ${{ job.status }}" >> status.txt
        if: always()

      - name: Upload status artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: status-${{ matrix.os }}-${{ matrix.browser }}
          path: status.txt

  send-summary:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./statuses

      - name: Build summary message
        id: summary
        run: |
          echo "Test Results for ${{ github.event.inputs.environment || 'dev' }} environment:" > message.txt
          echo "" >> message.txt

          for file in ./statuses/status-*/*.txt; do
            line=$(cat $file)
            os=$(echo $line | cut -d '|' -f1 | xargs)
            browser=$(echo $line | cut -d '|' -f2 | xargs)
            status=$(echo $line | cut -d '|' -f3 | xargs)

            if [ "$status" == "success" ]; then
              echo "✅ $os / $browser: PASSED" >> message.txt
            else
              echo "❌ $os / $browser: FAILED" >> message.txt
            fi
          done

          echo "" >> message.txt
          echo "Full reports available in artifacts." >> message.txt

      - name: Send Telegram Notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          MESSAGE="$(cat message.txt)"
          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage \
            -d chat_id=$TELEGRAM_CHAT_ID \
            -d parse_mode=Markdown \
            -d text="${MESSAGE}"
