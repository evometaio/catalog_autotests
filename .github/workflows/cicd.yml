name: Tests CI Pipeline

on:
  push:
    branches: [main, develop, feature/*, bugfix/*, hotfix/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Окружение для тестирования'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - dev
      browsers:
        description: 'Браузеры для тестирования'
        required: false
        default: 'chromium'
        type: choice
        options:
        - chromium
        - firefox
        - webkit
        - all
      run_type:
        description: 'Тип запуска тестов'
        required: false
        default: 'regression'
        type: choice
        options:
        - smoke
        - regression
        - full

env:
  ALLURE_REPORT_DIR: "allure-report"
  ALLURE_RESULTS_DIR: "allure-results"
  PROD_BASE_URL: "https://virtualtours.qbd.ae/map"
  DEV_BASE_URL: "https://qube-dev-next.evometa.io/map"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: ${{ github.event.inputs.browsers == 'all' && fromJSON('["chromium","firefox","webkit"]') || fromJSON('["chromium"]') }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-playwright

      - name: Install Playwright browsers
        run: |
          python -m playwright install ${{ matrix.browser }}
          python -m playwright install-deps

      - name: Install Allure (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          curl -o allure-2.27.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          sudo tar -zxvf allure-2.27.0.tgz -C /opt/
          sudo ln -s /opt/allure-2.27.0/bin/allure /usr/bin/allure

      - name: Install Allure (macOS)
        if: runner.os == 'macOS'
        run: brew install allure

      - name: Install Java (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: choco install openjdk --version=17 -y

      - name: Install Allure (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $allureVersion = "2.27.0"
          $allureUrl = "https://github.com/allure-framework/allure2/releases/download/$allureVersion/allure-$allureVersion.tgz"
          $allureArchive = "$env:TEMP\allure-$allureVersion.tgz"

          Invoke-WebRequest -Uri $allureUrl -OutFile $allureArchive
          tar -xzf $allureArchive -C C:\
          $allureDir = "C:\allure-$allureVersion"
          echo "$allureDir\bin" >> $env:GITHUB_PATH
          Remove-Item $allureArchive -Force

      - name: Run tests
        run: |
          pytest --browser=${{ matrix.browser }} --alluredir=${{ env.ALLURE_RESULTS_DIR }} --maxfail=0 --tb=short --continue-on-collection-errors
        env:
          PROD_BASE_URL: ${{ github.event.inputs.environment == 'prod' && env.PROD_BASE_URL || env.DEV_BASE_URL }}

      - name: Generate Allure report
        run: |
          allure generate ${{ env.ALLURE_RESULTS_DIR }} --clean -o ${{ env.ALLURE_REPORT_DIR }} || echo "Allure report generation failed"

      - name: Ensure summary.json exists
        run: |
          mkdir -p "${{ env.ALLURE_REPORT_DIR }}/widgets"
          if [ ! -f "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json" ]; then
            echo '{"statistic":{"total":0,"passed":0,"failed":0,"skipped":0,"broken":0,"canceled":0}}' > "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"
          fi

  send-summary:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Generate and send Telegram summary
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            <b>🚀 Итоговый отчет по тестам</b>
            
            <b>Проект:</b> ${{ github.repository }}
            <b>Ветка:</b> ${{ github.ref_name }}
            <b>Окружение:</b> ${{ github.event.inputs.environment }}
            
            <b>Статусы по ОС и браузерам:</b>
            <code>│</code> • Ubuntu + Chromium: ${{ needs.test.result == 'success' && '✅' || '❌' }}
            <code>│</code> • Ubuntu + Firefox: ${{ needs.test.result == 'success' && '✅' || '❌' }}
            <code>│</code> • Ubuntu + WebKit: ${{ needs.test.result == 'success' && '✅' || '❌' }}
            <code>│</code> • Windows + Chromium: ${{ needs.test.result == 'success' && '✅' || '❌' }}
            <code>│</code> • Windows + Firefox: ${{ needs.test.result == 'success' && '✅' || '❌' }}
            <code>│</code> • Windows + WebKit: ${{ needs.test.result == 'success' && '✅' || '❌' }}
            <code>│</code> • macOS + Chromium: ${{ needs.test.result == 'success' && '✅' || '❌' }}
            <code>│</code> • macOS + Firefox: ${{ needs.test.result == 'success' && '✅' || '❌' }}
            <code>│</code> • macOS + WebKit: ${{ needs.test.result == 'success' && '✅' || '❌' }}
            
            <b>Ссылка на Allure:</b> <a href="https://${{ github.repository_owner }}.github.io/catalog_autotests/">отчет</a>
            <b>Ссылка на Actions:</b> <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">GitHub Actions</a>
          format: html
          disable_web_page_preview: true
