name: Tests CI Pipeline

on: 
  push:
    branches: [main, develop, feature/*, bugfix/*, hotfix/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: '–û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - dev
      browsers:
        description: '–ë—Ä–∞—É–∑–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        required: false
        default: 'chromium'
        type: choice
        options:
        - chromium
        - firefox
        - webkit
        - all
      run_type:
        description: '–¢–∏–ø –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤'
        required: false
        default: 'regression'
        type: choice
        options:
        - smoke
        - regression
        - full

env:
  ALLURE_REPORT_DIR: "allure-report"
  ALLURE_RESULTS_DIR: "allure-results"
  PROD_BASE_URL: "https://virtualtours.qbd.ae/map"
  DEV_BASE_URL: "https://qube-dev-next.evometa.io/map"

jobs:
  test-prod:
    runs-on: ${{ matrix.os }}
    if: |
      github.event_name == 'workflow_dispatch' && inputs.environment == 'prod' || 
      github.ref == 'refs/heads/main' || 
      github.event_name == 'push' || 
      github.event_name == 'pull_request'
    strategy:
      matrix:
        os: ${{ github.ref == 'refs/heads/main' && fromJSON('["ubuntu-latest", "windows-latest", "macos-latest"]') || fromJSON('["ubuntu-latest"]') }}
        browser: ${{ github.ref == 'refs/heads/main' && fromJSON('["chromium", "firefox", "webkit"]') || fromJSON('["chromium"]') }}

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Checkout gh-pages branch
        if: github.ref == 'refs/heads/main'
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          sparse-checkout: "history"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-playwright
          playwright install ${{ matrix.browser }}
          playwright install-deps

      - name: Install Allure CLI (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre
          curl -o allure-2.24.0.tgz -Ls https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.0/allure-commandline-2.24.0.tgz
          sudo tar -zxvf allure-2.24.0.tgz -C /usr/local
          echo "/usr/local/allure-2.24.0/bin" >> $GITHUB_PATH

      - name: Install Allure CLI (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install allure
          echo "$env:ChocolateyInstall\bin" >> $env:GITHUB_PATH

      - name: Install Allure CLI (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install allure
          echo "/opt/homebrew/bin" >> $GITHUB_PATH

      - name: Prepare directories
        if: always()
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            mkdir -p "allure-results/history"
            mkdir -p "allure-report/widgets"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            mkdir -p "allure-results/history"
            mkdir -p "allure-report/widgets"
          else
            # Windows: PowerShell –∫–æ–º–∞–Ω–¥—ã
            New-Item -ItemType Directory -Force -Path "allure-results/history" | Out-Null
            New-Item -ItemType Directory -Force -Path "allure-report/widgets" | Out-Null
          fi

      - name: Run tests on PROD
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            xvfb-run -a pytest --browser=${{ matrix.browser }} --alluredir=${{ env.ALLURE_RESULTS_DIR }}
          else
            pytest --browser=${{ matrix.browser }} --alluredir=${{ env.ALLURE_RESULTS_DIR }}
          fi
        env:
          PROD_BASE_URL: ${{ env.PROD_BASE_URL }}

      - name: Generate Allure report
        if: always()
        run: |
          allure generate ${{ env.ALLURE_RESULTS_DIR }} --clean -o ${{ env.ALLURE_REPORT_DIR }} || echo "Allure report generation failed"

      - name: Ensure summary.json exists
        if: always()
        run: |
          mkdir -p "${{ env.ALLURE_REPORT_DIR }}/widgets"
          if [ ! -f "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json" ]; then
            echo '{"statistic":{"total":0,"passed":0,"failed":0,"skipped":0,"broken":0,"canceled":0}}' > "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"
          fi

      - name: Parse test results
        id: allure-stats
        if: always()
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update && sudo apt-get install -y jq
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew install jq
          else
            choco install jq
          fi
          
          SUMMARY_FILE="${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"

          TOTAL=$(jq -r '.statistic.total // 0' "$SUMMARY_FILE")
          PASSED=$(jq -r '.statistic.passed // 0' "$SUMMARY_FILE")
          FAILED=$(jq -r '.statistic.failed // 0' "$SUMMARY_FILE")
          SKIPPED=$(jq -r '.statistic.skipped // 0' "$SUMMARY_FILE")
          BROKEN=$(jq -r '.statistic.broken // 0' "$SUMMARY_FILE")
          CANCELED=$(jq -r '.statistic.canceled // 0' "$SUMMARY_FILE")

          {
            echo "TOTAL=$TOTAL"
            echo "PASSED=$PASSED"
            echo "FAILED=$FAILED"
            echo "SKIPPED=$SKIPPED"
            echo "BROKEN=$BROKEN"
            echo "CANCELED=$CANCELED"
          } >> $GITHUB_OUTPUT

      - name: Update Allure history
        if: always() && github.ref == 'refs/heads/main'
        run: |
          if [ -d "${{ env.ALLURE_REPORT_DIR }}/history" ]; then
            cp -R ${{ env.ALLURE_REPORT_DIR }}/history/* gh-pages/history/ || echo "No history to update"
          fi

      - name: Deploy to GitHub Pages (Ubuntu only)
        if: always() && github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: allure-report
          clean: true
          clean-exclude: "history"

      - name: Determine final status
        id: final-status
        if: always()
        run: |
          FAILED=${{ steps.allure-stats.outputs.FAILED || 0 }}
          BROKEN=${{ steps.allure-stats.outputs.BROKEN || 0 }}

          if [ "$FAILED" -gt 0 ] || [ "$BROKEN" -gt 0 ]; then
            echo "FINAL_STATUS=‚ùå –û–®–ò–ë–ö–ò" >> $GITHUB_OUTPUT
            echo "FINAL_MESSAGE=‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤!</b>" >> $GITHUB_OUTPUT
            echo "EMOJI=‚ùå" >> $GITHUB_OUTPUT
          else
            echo "FINAL_STATUS=‚úÖ –£–°–ü–ï–®–ù–û" >> $GITHUB_OUTPUT
            echo "FINAL_MESSAGE=üéâ <b>–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!</b>" >> $GITHUB_OUTPUT
            echo "EMOJI=‚úÖ" >> $GITHUB_OUTPUT
          fi

      - name: Send Telegram notification (Ubuntu only)
        if: always() && github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            <b>üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –Ω–∞ PROD</b>
            
            <b>–ü—Ä–æ–µ–∫—Ç:</b> ${{ github.repository }}
            <b>–í–µ—Ç–∫–∞:</b> ${{ github.ref_name }}
            <b>–û–∫—Ä—É–∂–µ–Ω–∏–µ:</b> üü¢ PRODUCTION
            <b>–ë—Ä–∞—É–∑–µ—Ä:</b> ${{ matrix.browser }}
            <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> ${{ matrix.os }}
            <b>–°—Ç–∞—Ç—É—Å:</b> ${{ steps.final-status.outputs.EMOJI }}
            
            <b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> (${{ steps.allure-stats.outputs.TOTAL }} —Ç–µ—Å—Ç–æ–≤):
            <code>‚îÇ</code> ‚Ä¢ ‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> ${{ steps.allure-stats.outputs.PASSED }}
            <code>‚îÇ</code> ‚Ä¢ ‚ùå <b>–£–ø–∞–≤—à–∏—Ö:</b> ${{ steps.allure-stats.outputs.FAILED }}
            <code>‚îÇ</code> ‚Ä¢ ‚è© <b>–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö:</b> ${{ steps.allure-stats.outputs.SKIPPED }}
            
            <b>üîó –°—Å—ã–ª–∫–∏</b>:
            <code>‚îÇ</code> ‚Ä¢ <a href="https://${{ github.repository_owner }}.github.io/catalog_autotests/">Allure Report</a>
            <code>‚îÇ</code> ‚Ä¢ <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">GitHub Actions</a>
            
            ${{ steps.final-status.outputs.FINAL_MESSAGE }}
          format: html
          disable_web_page_preview: true

  test-dev:
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'dev'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: ${{ github.event.inputs.browsers == 'all' && fromJSON('["chromium", "firefox", "webkit"]') || fromJSON('["chromium"]') }}

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          sparse-checkout: "history"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-playwright
          playwright install ${{ matrix.browser }}
          playwright install-deps

      - name: Install Allure CLI (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre
          curl -o allure-2.24.0.tgz -Ls https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.0/allure-commandline-2.24.0.tgz
          sudo tar -zxvf allure-2.24.0.tgz -C /usr/local
          echo "/usr/local/allure-2.24.0/bin" >> $GITHUB_PATH

      - name: Install Allure CLI (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install allure
          echo "$env:ChocolateyInstall\bin" >> $env:GITHUB_PATH

      - name: Install Allure CLI (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install allure
          echo "/opt/homebrew/bin" >> $GITHUB_PATH

      - name: Prepare directories
        if: always()
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            mkdir -p "allure-results/history"
            mkdir -p "allure-report/widgets"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            mkdir -p "allure-results/history"
            mkdir -p "allure-report/widgets"
          else
            # Windows: PowerShell –∫–æ–º–∞–Ω–¥—ã
            New-Item -ItemType Directory -Force -Path "allure-results/history" | Out-Null
            New-Item -ItemType Directory -Force -Path "allure-report/widgets" | Out-Null
          fi

      - name: Run tests on DEV
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            xvfb-run -a pytest --browser=${{ matrix.browser }} --alluredir=${{ env.ALLURE_RESULTS_DIR }}
          else
            pytest --browser=${{ matrix.browser }} --alluredir=${{ env.ALLURE_RESULTS_DIR }}
          fi
        env:
          PROD_BASE_URL: ${{ env.DEV_BASE_URL }}

      - name: Generate Allure report
        if: always()
        run: |
          allure generate ${{ env.ALLURE_RESULTS_DIR }} --clean -o ${{ env.ALLURE_REPORT_DIR }} || echo "Allure report generation failed"

      - name: Ensure summary.json exists
        if: always()
        run: |
          mkdir -p "${{ env.ALLURE_REPORT_DIR }}/widgets"
          if [ ! -f "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json" ]; then
            echo '{"statistic":{"total":0,"passed":0,"failed":0,"skipped":0,"broken":0,"canceled":0}}' > "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"
          fi

      - name: Parse test results
        id: allure-stats
        if: always()
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update && sudo apt-get install -y jq
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew install jq
          else
            choco install jq
          fi
          
          SUMMARY_FILE="${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"

          TOTAL=$(jq -r '.statistic.total // 0' "$SUMMARY_FILE")
          PASSED=$(jq -r '.statistic.passed // 0' "$SUMMARY_FILE")
          FAILED=$(jq -r '.statistic.failed // 0' "$SUMMARY_FILE")
          SKIPPED=$(jq -r '.statistic.skipped // 0' "$SUMMARY_FILE")
          BROKEN=$(jq -r '.statistic.broken // 0' "$SUMMARY_FILE")
          CANCELED=$(jq -r '.statistic.canceled // 0' "$SUMMARY_FILE")

          {
            echo "TOTAL=$TOTAL"
            echo "PASSED=$PASSED"
            echo "FAILED=$FAILED"
            echo "SKIPPED=$SKIPPED"
            echo "BROKEN=$BROKEN"
            echo "CANCELED=$CANCELED"
          } >> $GITHUB_OUTPUT

      - name: Update Allure history
        if: always()
        run: |
          if [ -d "${{ env.ALLURE_REPORT_DIR }}/history" ]; then
            cp -R ${{ env.ALLURE_REPORT_DIR }}/history/* gh-pages/history/ || echo "No history to update"
          fi

      - name: Deploy to GitHub Pages (Ubuntu only)
        if: always() && matrix.os == 'ubuntu-latest'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: allure-report
          clean: true
          clean-exclude: "history"

      - name: Determine final status
        id: final-status
        if: always()
        run: |
          FAILED=${{ steps.allure-stats.outputs.FAILED || 0 }}
          BROKEN=${{ steps.allure-stats.outputs.BROKEN || 0 }}

          if [ "$FAILED" -gt 0 ] || [ "$BROKEN" -gt 0 ]; then
            echo "FINAL_STATUS=‚ùå –û–®–ò–ë–ö–ò" >> $GITHUB_OUTPUT
            echo "FINAL_MESSAGE=‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤!</b>" >> $GITHUB_OUTPUT
            echo "EMOJI=‚ùå" >> $GITHUB_OUTPUT
          else
            echo "FINAL_STATUS=‚úÖ –£–°–ü–ï–®–ù–û" >> $GITHUB_OUTPUT
            echo "FINAL_MESSAGE=üéâ <b>–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!</b>" >> $GITHUB_OUTPUT
            echo "EMOJI=‚úÖ" >> $GITHUB_OUTPUT
          fi

      - name: Send Telegram notification (Ubuntu only)
        if: always() && matrix.os == 'ubuntu-latest'
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            <b>üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –Ω–∞ DEV</b>
            
            <b>–ü—Ä–æ–µ–∫—Ç:</b> ${{ github.repository }}
            <b>–í–µ—Ç–∫–∞:</b> ${{ github.ref_name }}
            <b>–û–∫—Ä—É–∂–µ–Ω–∏–µ:</b> üü° DEVELOPMENT
            <b>–ë—Ä–∞—É–∑–µ—Ä:</b> ${{ matrix.browser }}
            <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> ${{ matrix.os }}
            <b>–°—Ç–∞—Ç—É—Å:</b> ${{ steps.final-status.outputs.EMOJI }}
            
            <b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> (${{ steps.allure-stats.outputs.TOTAL }} —Ç–µ—Å—Ç–æ–≤):
            <code>‚îÇ</code> ‚Ä¢ ‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> ${{ steps.allure-stats.outputs.PASSED }}
            <code>‚îÇ</code> ‚Ä¢ ‚ùå <b>–£–ø–∞–≤—à–∏—Ö:</b> ${{ steps.allure-stats.outputs.FAILED }}
            <code>‚îÇ</code> ‚Ä¢ ‚è© <b>–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö:</b> ${{ steps.allure-stats.outputs.SKIPPED }}
            
            <b>üîó –°—Å—ã–ª–∫–∏</b>:
            <code>‚îÇ</code> ‚Ä¢ <a href="https://${{ github.repository_owner }}.github.io/catalog_autotests/">Allure Report</a>
            <code>‚îÇ</code> ‚Ä¢ <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">GitHub Actions</a>
            
            ${{ steps.final-status.outputs.FINAL_MESSAGE }}
          format: html
          disable_web_page_preview: true
