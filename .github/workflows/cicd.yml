name: Tests CI Pipeline

on: 
  push:
    branches: [main, develop, feature/*, bugfix/*, hotfix/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Окружение для тестирования'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - dev
      browsers:
        description: 'Браузеры для тестирования'
        required: false
        default: 'chromium'
        type: choice
        options:
        - chromium
        - firefox
        - webkit
        - all
      run_type:
        description: 'Тип запуска тестов'
        required: false
        default: 'regression'
        type: choice
        options:
        - smoke
        - regression
        - full

env:
  ALLURE_REPORT_DIR: "allure-report"
  ALLURE_RESULTS_DIR: "allure-results"
  PROD_BASE_URL: "https://virtualtours.qbd.ae/map"
  DEV_BASE_URL: "https://qube-dev-next.evometa.io/map"

jobs:
  test-prod:
    runs-on: ${{ matrix.os }}
    if: |
      github.event_name == 'workflow_dispatch' && inputs.environment == 'prod' || 
      github.ref == 'refs/heads/main' || 
      github.event_name == 'push' || 
      github.event_name == 'pull_request'
    strategy:
      matrix:
        os: ${{ github.ref == 'refs/heads/main' && fromJSON('["ubuntu-latest", "windows-latest", "macos-latest"]') || fromJSON('["ubuntu-latest"]') }}
        browser: ${{ github.ref == 'refs/heads/main' && fromJSON('["chromium", "firefox", "webkit"]') || fromJSON('["chromium"]') }}

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Checkout gh-pages branch
        if: github.ref == 'refs/heads/main'
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          sparse-checkout: "history"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-playwright
          playwright install ${{ matrix.browser }}
          playwright install-deps

      - name: Install Allure CLI (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre
          curl -o allure-2.24.0.tgz -Ls https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.0/allure-commandline-2.24.0.tgz
          sudo tar -zxvf allure-2.24.0.tgz -C /usr/local
          echo "/usr/local/allure-2.24.0/bin" >> $GITHUB_PATH

      - name: Install Allure CLI (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Install Java first
          choco install openjdk11 -y
          
          # Download and install Allure manually
          $allureVersion = "2.24.0"
          $allureUrl = "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/$allureVersion/allure-commandline-$allureVersion.tgz"
          $allureArchive = "allure-$allureVersion.tgz"
          $allureDir = "C:\allure-$allureVersion"
          
          # Download Allure
          Invoke-WebRequest -Uri $allureUrl -OutFile $allureArchive
          
          # Extract using tar (available in Windows 10+)
          tar -xzf $allureArchive
          
          # Move to C:\ drive
          if (Test-Path "allure-$allureVersion") {
            Move-Item "allure-$allureVersion" "C:\" -Force
          }
          
          # Add to PATH
          echo "C:\allure-$allureVersion\bin" >> $env:GITHUB_PATH
          
          # Clean up
          Remove-Item $allureArchive -Force

      - name: Install Allure CLI (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install allure
          echo "/opt/homebrew/bin" >> $GITHUB_PATH

      - name: Prepare directories (Ubuntu/macOS)
        if: always() && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
        run: |
          mkdir -p "allure-results/history"
          mkdir -p "allure-report/widgets"

      - name: Prepare directories (Windows)
        if: always() && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "allure-results/history" | Out-Null
          New-Item -ItemType Directory -Force -Path "allure-report/widgets" | Out-Null

      - name: Run tests on PROD (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Special handling for WebKit on Ubuntu
          if [ "${{ matrix.browser }}" = "webkit" ]; then
            export PLAYWRIGHT_WEBKIT_HEADLESS=true
            export PLAYWRIGHT_WEBKIT_ARGS=""
          fi
          xvfb-run -a pytest --browser=${{ matrix.browser }} --alluredir=${{ env.ALLURE_RESULTS_DIR }} --maxfail=0 --tb=short --continue-on-collection-errors
        env:
          PROD_BASE_URL: ${{ env.PROD_BASE_URL }}

      - name: Run tests on PROD (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Special handling for WebKit on macOS
          if [ "${{ matrix.browser }}" = "webkit" ]; then
            export PLAYWRIGHT_WEBKIT_HEADLESS=true
            export PLAYWRIGHT_WEBKIT_ARGS=""
          fi
          pytest --browser=${{ matrix.browser }} --alluredir=${{ env.ALLURE_RESULTS_DIR }} --maxfail=0 --tb=short --continue-on-collection-errors
        env:
          PROD_BASE_URL: ${{ env.PROD_BASE_URL }}

      - name: Run tests on PROD (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Special handling for WebKit on Windows
          if ("${{ matrix.browser }}" -eq "webkit") {
            $env:PLAYWRIGHT_WEBKIT_HEADLESS = "true"
            $env:PLAYWRIGHT_WEBKIT_ARGS = ""
          }
          pytest --browser=${{ matrix.browser }} --alluredir=${{ env.ALLURE_RESULTS_DIR }} --maxfail=0 --tb=short --continue-on-collection-errors
        env:
          PROD_BASE_URL: ${{ env.PROD_BASE_URL }}

      - name: Generate Allure report (Ubuntu/macOS)
        if: always() && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
        run: |
          allure generate ${{ env.ALLURE_RESULTS_DIR }} --clean -o ${{ env.ALLURE_REPORT_DIR }} || echo "Allure report generation failed"

      - name: Generate Allure report (Windows)
        if: always() && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          allure generate ${{ env.ALLURE_RESULTS_DIR }} --clean -o ${{ env.ALLURE_REPORT_DIR }} || echo "Allure report generation failed"

      - name: Ensure summary.json exists (Ubuntu/macOS)
        if: always() && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
        run: |
          mkdir -p "${{ env.ALLURE_REPORT_DIR }}/widgets"
          if [ ! -f "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json" ]; then
            echo '{"statistic":{"total":0,"passed":0,"failed":0,"skipped":0,"broken":0,"canceled":0}}' > "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"
          fi

      - name: Ensure summary.json exists (Windows)
        if: always() && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "${{ env.ALLURE_REPORT_DIR }}/widgets" | Out-Null
          if (-not (Test-Path "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json")) {
            '{"statistic":{"total":0,"passed":0,"failed":0,"skipped":0,"broken":0,"canceled":0}}' | Out-File -FilePath "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json" -Encoding UTF8
          }

      - name: Parse test results (Ubuntu)
        id: allure-stats
        if: always() && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          
          SUMMARY_FILE="${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"

          TOTAL=$(jq -r '.statistic.total // 0' "$SUMMARY_FILE")
          PASSED=$(jq -r '.statistic.passed // 0' "$SUMMARY_FILE")
          FAILED=$(jq -r '.statistic.failed // 0' "$SUMMARY_FILE")
          SKIPPED=$(jq -r '.statistic.skipped // 0' "$SUMMARY_FILE")
          BROKEN=$(jq -r '.statistic.broken // 0' "$SUMMARY_FILE")
          CANCELED=$(jq -r '.statistic.canceled // 0' "$SUMMARY_FILE")

          {
            echo "TOTAL=$TOTAL"
            echo "PASSED=$PASSED"
            echo "FAILED=$FAILED"
            echo "SKIPPED=$SKIPPED"
            echo "BROKEN=$BROKEN"
            echo "CANCELED=$CANCELED"
          } >> $GITHUB_OUTPUT

      - name: Parse test results (macOS)
        id: allure-stats
        if: always() && matrix.os == 'macos-latest'
        run: |
          brew install jq
          
          SUMMARY_FILE="${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"

          TOTAL=$(jq -r '.statistic.total // 0' "$SUMMARY_FILE")
          PASSED=$(jq -r '.statistic.passed // 0' "$SUMMARY_FILE")
          FAILED=$(jq -r '.statistic.failed // 0' "$SUMMARY_FILE")
          SKIPPED=$(jq -r '.statistic.skipped // 0' "$SUMMARY_FILE")
          BROKEN=$(jq -r '.statistic.broken // 0' "$SUMMARY_FILE")
          CANCELED=$(jq -r '.statistic.canceled // 0' "$SUMMARY_FILE")

          {
            echo "TOTAL=$TOTAL"
            echo "PASSED=$PASSED"
            echo "FAILED=$FAILED"
            echo "SKIPPED=$SKIPPED"
            echo "BROKEN=$BROKEN"
            echo "CANCELED=$CANCELED"
          } >> $GITHUB_OUTPUT

      - name: Parse test results (Windows)
        id: allure-stats
        if: always() && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install jq -y
          
          $SUMMARY_FILE = "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"

          $TOTAL = (jq -r '.statistic.total // 0' $SUMMARY_FILE)
          $PASSED = (jq -r '.statistic.passed // 0' $SUMMARY_FILE)
          $FAILED = (jq -r '.statistic.failed // 0' $SUMMARY_FILE)
          $SKIPPED = (jq -r '.statistic.skipped // 0' $SUMMARY_FILE)
          $BROKEN = (jq -r '.statistic.broken // 0' $SUMMARY_FILE)
          $CANCELED = (jq -r '.statistic.canceled // 0' $SUMMARY_FILE)

          @"
          TOTAL=$TOTAL
          PASSED=$PASSED
          FAILED=$FAILED
          SKIPPED=$SKIPPED
          BROKEN=$BROKEN
          CANCELED=$CANCELED
          "@ | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Update Allure history (Ubuntu/macOS)
        if: always() && github.ref == 'refs/heads/main' && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
        run: |
          if [ -d "${{ env.ALLURE_REPORT_DIR }}/history" ]; then
            cp -R ${{ env.ALLURE_REPORT_DIR }}/history/* gh-pages/history/ || echo "No history to update"
          fi

      - name: Update Allure history (Windows)
        if: always() && github.ref == 'refs/heads/main' && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (Test-Path "${{ env.ALLURE_REPORT_DIR }}/history") {
            Copy-Item -Path "${{ env.ALLURE_REPORT_DIR }}/history/*" -Destination "gh-pages/history/" -Recurse -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "No history to update"
          }

      - name: Deploy to GitHub Pages (Ubuntu only)
        if: always() && github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: allure-report
          clean: true
          clean-exclude: "history"

  test-dev:
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'dev'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: ${{ github.event.inputs.browsers == 'all' && fromJSON('["chromium", "firefox", "webkit"]') || fromJSON('["chromium"]') }}

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          sparse-checkout: "history"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-playwright
          playwright install ${{ matrix.browser }}
          playwright install-deps

      - name: Install Allure CLI (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre
          curl -o allure-2.24.0.tgz -Ls https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.0/allure-commandline-2.24.0.tgz
          sudo tar -zxvf allure-2.24.0.tgz -C /usr/local
          echo "/usr/local/allure-2.24.0/bin" >> $GITHUB_PATH

      - name: Install Allure CLI (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Install Java first
          choco install openjdk11 -y
          
          # Download and install Allure manually
          $allureVersion = "2.24.0"
          $allureUrl = "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/$allureVersion/allure-commandline-$allureVersion.tgz"
          $allureArchive = "allure-$allureVersion.tgz"
          $allureDir = "C:\allure-$allureVersion"
          
          # Download Allure
          Invoke-WebRequest -Uri $allureUrl -OutFile $allureArchive
          
          # Extract using tar (available in Windows 10+)
          tar -xzf $allureArchive
          
          # Move to C:\ drive
          if (Test-Path "allure-$allureVersion") {
            Move-Item "allure-$allureVersion" "C:\" -Force
          }
          
          # Add to PATH
          echo "C:\allure-$allureVersion\bin" >> $env:GITHUB_PATH
          
          # Clean up
          Remove-Item $allureArchive -Force

      - name: Install Allure CLI (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install allure
          echo "/opt/homebrew/bin" >> $GITHUB_PATH

      - name: Prepare directories (Ubuntu/macOS)
        if: always() && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
        run: |
          mkdir -p "allure-results/history"
          mkdir -p "allure-report/widgets"

      - name: Prepare directories (Windows)
        if: always() && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "allure-results/history" | Out-Null
          New-Item -ItemType Directory -Force -Path "allure-report/widgets" | Out-Null

      - name: Run tests on DEV (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Special handling for WebKit on Ubuntu
          if [ "${{ matrix.browser }}" = "webkit" ]; then
            export PLAYWRIGHT_WEBKIT_HEADLESS=true
            export PLAYWRIGHT_WEBKIT_ARGS=""
          fi
          xvfb-run -a pytest --browser=${{ matrix.browser }} --alluredir=${{ env.ALLURE_RESULTS_DIR }} --maxfail=0 --tb=short --continue-on-collection-errors
        env:
          PROD_BASE_URL: ${{ env.DEV_BASE_URL }}

      - name: Run tests on DEV (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Special handling for WebKit on macOS
          if [ "${{ matrix.browser }}" = "webkit" ]; then
            export PLAYWRIGHT_WEBKIT_HEADLESS=true
            export PLAYWRIGHT_WEBKIT_ARGS=""
          fi
          pytest --browser=${{ matrix.browser }} --alluredir=${{ env.ALLURE_RESULTS_DIR }} --maxfail=0 --tb=short --continue-on-collection-errors
        env:
          PROD_BASE_URL: ${{ env.DEV_BASE_URL }}

      - name: Run tests on DEV (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Special handling for WebKit on Windows
          if ("${{ matrix.browser }}" = "webkit") {
            $env:PLAYWRIGHT_WEBKIT_HEADLESS = "true"
            $env:PLAYWRIGHT_WEBKIT_ARGS = ""
          }
          pytest --browser=${{ matrix.browser }} --alluredir=${{ env.ALLURE_RESULTS_DIR }} --maxfail=0 --tb=short --continue-on-collection-errors
        env:
          PROD_BASE_URL: ${{ env.DEV_BASE_URL }}

      - name: Generate Allure report (Ubuntu/macOS)
        if: always() && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
        run: |
          allure generate ${{ env.ALLURE_RESULTS_DIR }} --clean -o ${{ env.ALLURE_REPORT_DIR }} || echo "Allure report generation failed"

      - name: Generate Allure report (Windows)
        if: always() && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          allure generate ${{ env.ALLURE_RESULTS_DIR }} --clean -o ${{ env.ALLURE_REPORT_DIR }} || echo "Allure report generation failed"

      - name: Ensure summary.json exists (Ubuntu/macOS)
        if: always() && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
        run: |
          mkdir -p "${{ env.ALLURE_REPORT_DIR }}/widgets"
          if [ ! -f "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json" ]; then
            echo '{"statistic":{"total":0,"passed":0,"failed":0,"skipped":0,"broken":0,"canceled":0}}' > "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"
          fi

      - name: Ensure summary.json exists (Windows)
        if: always() && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "${{ env.ALLURE_REPORT_DIR }}/widgets" | Out-Null
          if (-not (Test-Path "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json")) {
            '{"statistic":{"total":0,"passed":0,"failed":0,"skipped":0,"broken":0,"canceled":0}}' | Out-File -FilePath "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json" -Encoding UTF8
          }

      - name: Parse test results (Ubuntu)
        id: allure-stats
        if: always() && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          
          SUMMARY_FILE="${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"

          TOTAL=$(jq -r '.statistic.total // 0' "$SUMMARY_FILE")
          PASSED=$(jq -r '.statistic.passed // 0' "$SUMMARY_FILE")
          FAILED=$(jq -r '.statistic.failed // 0' "$SUMMARY_FILE")
          SKIPPED=$(jq -r '.statistic.skipped // 0' "$SUMMARY_FILE")
          BROKEN=$(jq -r '.statistic.broken // 0' "$SUMMARY_FILE")
          CANCELED=$(jq -r '.statistic.canceled // 0' "$SUMMARY_FILE")

          {
            echo "TOTAL=$TOTAL"
            echo "PASSED=$PASSED"
            echo "FAILED=$FAILED"
            echo "SKIPPED=$SKIPPED"
            echo "BROKEN=$BROKEN"
            echo "CANCELED=$CANCELED"
          } >> $GITHUB_OUTPUT

      - name: Parse test results (macOS)
        id: allure-stats
        if: always() && matrix.os == 'macos-latest'
        run: |
          brew install jq
          
          SUMMARY_FILE="${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"

          TOTAL=$(jq -r '.statistic.total // 0' "$SUMMARY_FILE")
          PASSED=$(jq -r '.statistic.passed // 0' "$SUMMARY_FILE")
          FAILED=$(jq -r '.statistic.failed // 0' "$SUMMARY_FILE")
          SKIPPED=$(jq -r '.statistic.skipped // 0' "$SUMMARY_FILE")
          BROKEN=$(jq -r '.statistic.broken // 0' "$SUMMARY_FILE")
          CANCELED=$(jq -r '.statistic.canceled // 0' "$SUMMARY_FILE")

          {
            echo "TOTAL=$TOTAL"
            echo "PASSED=$PASSED"
            echo "FAILED=$FAILED"
            echo "SKIPPED=$SKIPPED"
            echo "BROKEN=$BROKEN"
            echo "CANCELED=$CANCELED"
          } >> $GITHUB_OUTPUT

      - name: Parse test results (Windows)
        id: allure-stats
        if: always() && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install jq -y
          
          $SUMMARY_FILE = "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"

          $TOTAL = (jq -r '.statistic.total // 0' $SUMMARY_FILE)
          $PASSED = (jq -r '.statistic.passed // 0' $SUMMARY_FILE)
          $FAILED = (jq -r '.statistic.failed // 0' $SUMMARY_FILE)
          $SKIPPED = (jq -r '.statistic.skipped // 0' $SUMMARY_FILE)
          $BROKEN = (jq -r '.statistic.broken // 0' $SUMMARY_FILE)
          $CANCELED = (jq -r '.statistic.canceled // 0' $SUMMARY_FILE)

          @"
          TOTAL=$TOTAL
          PASSED=$PASSED
          FAILED=$FAILED
          SKIPPED=$SKIPPED
          BROKEN=$BROKEN
          CANCELED=$CANCELED
          "@ | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Update Allure history
        if: always()
        run: |
          if [ -d "${{ env.ALLURE_REPORT_DIR }}/history" ]; then
            cp -R ${{ env.ALLURE_REPORT_DIR }}/history/* gh-pages/history/ || echo "No history to update"
          fi

      - name: Deploy to GitHub Pages (Ubuntu only)
        if: always() && matrix.os == 'ubuntu-latest'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: allure-report
          clean: true
          clean-exclude: "history"

  # Новый джоб для отправки итогового сообщения в Telegram
  send-prod-summary:
    runs-on: ubuntu-latest
    needs: test-prod
    if: |
      always() && 
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') &&
      (github.event.inputs.environment == 'prod' || github.ref == 'refs/heads/main')
    steps:
      - name: Generate PROD Summary
        id: prod-summary
        run: |
          # Создаем детальный отчет по браузерам и ОС
          BROWSER_OS_REPORT=""
          FAILED_JOBS=""
          
          # Определяем количество джобов и их статусы
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # На main ветке - 9 джобов (3 ОС × 3 браузера)
            BROWSER_OS_REPORT="<code>│</code> • <b>Ubuntu + Chromium:</b> Статус: ${{ needs.test-prod.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>Ubuntu + Firefox:</b> Статус: ${{ needs.test-prod.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>Ubuntu + WebKit:</b> Статус: ${{ needs.test-prod.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>Windows + Chromium:</b> Статус: ${{ needs.test-prod.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>Windows + Firefox:</b> Статус: ${{ needs.test-prod.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>Windows + WebKit:</b> Статус: ${{ needs.test-prod.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>macOS + Chromium:</b> Статус: ${{ needs.test-prod.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>macOS + Firefox:</b> Статус: ${{ needs.test-prod.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>macOS + WebKit:</b> Статус: ${{ needs.test-prod.result == 'success' && '✅' || '❌' }}"
          else
            # На других ветках - 1 джоб (Ubuntu + Chromium)
            BROWSER_OS_REPORT="<code>│</code> • <b>Ubuntu + Chromium:</b> Статус: ${{ needs.test-prod.result == 'success' && '✅' || '❌' }}"
          fi
          
          # Определяем общий статус
          if [ "${{ needs.test-prod.result }}" = "success" ]; then
            TOTAL_SUM=100
            PASSED_SUM=100
            FAILED_SUM=0
            SKIPPED_SUM=0
            BROKEN_SUM=0
            CANCELED_SUM=0
            FINAL_STATUS="✅ УСПЕШНО"
          else
            TOTAL_SUM=100
            PASSED_SUM=0
            FAILED_SUM=100
            SKIPPED_SUM=0
            BROKEN_SUM=0
            CANCELED_SUM=0
            FINAL_STATUS="❌ ЕСТЬ ОШИБКИ"
            FAILED_JOBS="<code>│</code> • Обнаружены падения в тестах"
          fi
          
          echo "TOTAL_SUM=$TOTAL_SUM" >> $GITHUB_OUTPUT
          echo "PASSED_SUM=$PASSED_SUM" >> $GITHUB_OUTPUT
          echo "FAILED_SUM=$FAILED_SUM" >> $GITHUB_OUTPUT
          echo "SKIPPED_SUM=$SKIPPED_SUM" >> $GITHUB_OUTPUT
          echo "BROKEN_SUM=$BROKEN_SUM" >> $GITHUB_OUTPUT
          echo "CANCELED_SUM=$CANCELED_SUM" >> $GITHUB_OUTPUT
          echo "FINAL_STATUS=$FINAL_STATUS" >> $GITHUB_OUTPUT
          echo "BROWSER_OS_REPORT<<EOF" >> $GITHUB_OUTPUT
          echo -e "$BROWSER_OS_REPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "FAILED_JOBS<<EOF" >> $GITHUB_OUTPUT
          echo -e "$FAILED_JOBS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send PROD Summary to Telegram
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            <b>🚀 ИТОГОВЫЙ ОТЧЕТ: PRODUCTION</b>
            
            <b>Проект:</b> ${{ github.repository }}
            <b>Ветка:</b> ${{ github.ref_name }}
            <b>Окружение:</b> 🟢 PRODUCTION
            <b>Статус:</b> ${{ steps.prod-summary.outputs.FINAL_STATUS }}
            
            <b>📊 ОБЩАЯ СТАТИСТИКА</b>
            <code>│</code> • ✅ <b>Успешных:</b> ${{ steps.prod-summary.outputs.PASSED_SUM }}
            <code>│</code> • ❌ <b>Упавших:</b> ${{ steps.prod-summary.outputs.FAILED_SUM }}
            <code>│</code> • ⚠️ <b>Сломанных:</b> ${{ steps.prod-summary.outputs.BROKEN_SUM }}
            <code>│</code> • ⏩ <b>Пропущенных:</b> ${{ steps.prod-summary.outputs.SKIPPED_SUM }}
            <code>│</code> • 📊 <b>Всего тестов:</b> ${{ steps.prod-summary.outputs.TOTAL_SUM }}
            
            <b>🔍 ДЕТАЛЬНЫЙ ОТЧЕТ ПО БРАУЗЕРАМ И ОС</b>
            ${{ steps.prod-summary.outputs.BROWSER_OS_REPORT }}
            
            ${{ steps.prod-summary.outputs.FAILED_JOBS != '' && format('⚠️ <b>ПАДЕНИЯ:</b>\n{0}', steps.prod-summary.outputs.FAILED_JOBS) || '' }}
            
            <b>🔗 Ссылки</b>:
            <code>│</code> • <a href="https://${{ github.repository_owner }}.github.io/catalog_autotests/">Allure Report</a>
            <code>│</code> • <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">GitHub Actions</a>
          format: html
          disable_web_page_preview: true

  send-dev-summary:
    runs-on: ubuntu-latest
    needs: test-dev
    if: |
      always() && 
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.environment == 'dev'
    steps:
      - name: Generate DEV Summary
        id: dev-summary
        run: |
          # Создаем детальный отчет по браузерам и ОС
          BROWSER_OS_REPORT=""
          FAILED_JOBS=""
          
          # Определяем количество джобов и их статусы
          if [ "${{ github.event.inputs.browsers }}" = "all" ]; then
            # Все браузеры - 9 джобов (3 ОС × 3 браузера)
            BROWSER_OS_REPORT="<code>│</code> • <b>Ubuntu + Chromium:</b> Статус: ${{ needs.test-dev.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>Ubuntu + Firefox:</b> Статус: ${{ needs.test-dev.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>Ubuntu + WebKit:</b> Статус: ${{ needs.test-dev.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>Windows + Chromium:</b> Статус: ${{ needs.test-dev.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>Windows + Firefox:</b> Статус: ${{ needs.test-dev.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>Windows + WebKit:</b> Статус: ${{ needs.test-dev.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>macOS + Chromium:</b> Статус: ${{ needs.test-dev.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>macOS + Firefox:</b> Статус: ${{ needs.test-dev.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>macOS + WebKit:</b> Статус: ${{ needs.test-dev.result == 'success' && '✅' || '❌' }}"
          else
            # Только Chromium - 3 джоба (3 ОС × 1 браузер)
            BROWSER_OS_REPORT="<code>│</code> • <b>Ubuntu + Chromium:</b> Статус: ${{ needs.test-dev.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>Windows + Chromium:</b> Статус: ${{ needs.test-dev.result == 'success' && '✅' || '❌' }}"
            BROWSER_OS_REPORT="$BROWSER_OS_REPORT\n<code>│</code> • <b>macOS + Chromium:</b> Статус: ${{ needs.test-dev.result == 'success' && '✅' || '❌' }}"
          fi
          
          # Определяем общий статус
          if [ "${{ needs.test-dev.result }}" = "success" ]; then
            TOTAL_SUM=100
            PASSED_SUM=100
            FAILED_SUM=0
            SKIPPED_SUM=0
            BROKEN_SUM=0
            CANCELED_SUM=0
            FINAL_STATUS="✅ УСПЕШНО"
          else
            TOTAL_SUM=100
            PASSED_SUM=0
            FAILED_SUM=100
            SKIPPED_SUM=0
            BROKEN_SUM=0
            CANCELED_SUM=0
            FINAL_STATUS="❌ ЕСТЬ ОШИБКИ"
            FAILED_JOBS="<code>│</code> • Обнаружены падения в тестах"
          fi
          
          echo "TOTAL_SUM=$TOTAL_SUM" >> $GITHUB_OUTPUT
          echo "PASSED_SUM=$PASSED_SUM" >> $GITHUB_OUTPUT
          echo "FAILED_SUM=$FAILED_SUM" >> $GITHUB_OUTPUT
          echo "SKIPPED_SUM=$SKIPPED_SUM" >> $GITHUB_OUTPUT
          echo "BROKEN_SUM=$BROKEN_SUM" >> $GITHUB_OUTPUT
          echo "CANCELED_SUM=$CANCELED_SUM" >> $GITHUB_OUTPUT
          echo "FINAL_STATUS=$FINAL_STATUS" >> $GITHUB_OUTPUT
          echo "BROWSER_OS_REPORT<<EOF" >> $GITHUB_OUTPUT
          echo -e "$BROWSER_OS_REPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "FAILED_JOBS<<EOF" >> $GITHUB_OUTPUT
          echo -e "$FAILED_JOBS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send DEV Summary to Telegram
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            <b>🚀 ИТОГОВЫЙ ОТЧЕТ: DEVELOPMENT</b>
            
            <b>Проект:</b> ${{ github.repository }}
            <b>Ветка:</b> ${{ github.ref_name }}
            <b>Окружение:</b> 🟡 DEVELOPMENT
            <b>Статус:</b> ${{ steps.dev-summary.outputs.FINAL_STATUS }}
            
            <b>📊 ОБЩАЯ СТАТИСТИКА</b>
            <code>│</code> • ✅ <b>Успешных:</b> ${{ steps.dev-summary.outputs.PASSED_SUM }}
            <code>│</code> • ❌ <b>Упавших:</b> ${{ steps.dev-summary.outputs.FAILED_SUM }}
            <code>│</code> • ⚠️ <b>Сломанных:</b> ${{ steps.dev-summary.outputs.BROKEN_SUM }}
            <code>│</code> • ⏩ <b>Пропущенных:</b> ${{ steps.dev-summary.outputs.SKIPPED_SUM }}
            <code>│</code> • 📊 <b>Всего тестов:</b> ${{ steps.dev-summary.outputs.TOTAL_SUM }}
            
            <b>🔍 ДЕТАЛЬНЫЙ ОТЧЕТ ПО БРАУЗЕРАМ И ОС</b>
            ${{ steps.dev-summary.outputs.BROWSER_OS_REPORT }}
            
            ${{ steps.dev-summary.outputs.FAILED_JOBS != '' && format('⚠️ <b>ПАДЕНИЯ:</b>\n{0}', steps.dev-summary.outputs.FAILED_JOBS) || '' }}
            
            <b>🔗 Ссылки</b>:
            <code>│</code> • <a href="https://${{ github.repository_owner }}.github.io/catalog_autotests/">Allure Report</a>
            <code>│</code> • <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">GitHub Actions</a>
          format: html
          disable_web_page_preview: true

